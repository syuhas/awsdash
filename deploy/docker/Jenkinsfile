// @Library('pipeline-library') _  // Use Shared Libraries if available

// import groovy.yaml.YamlSlurper

pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID = "${ params.Account }"
        AWS_REGION = 'us-east-1'
        IMAGE_TAG = 'latest'
        IMAGE_NAME = 's3dashboard'
        ROLE_NAME = 'jenkinsAdminXacnt'
    }


    stages {
        stage('Set Environment Variables') {
            steps {
                sh 'echo "Account ID: ${AWS_ACCOUNT_ID}"'
                sh 'echo "Setting Environment Variables"'
                sh 'ls -la deploy/docker'
                script {
                    config = readYaml file: 'deploy/docker/config.yaml'
                    accountConfig = config["aws_accounts"]["${AWS_ACCOUNT_ID}"]
                    env.TF_VAR_aws_security_group = accountConfig.security_group
                    env.TF_VAR_aws_subnet_ids = accountConfig.subnet_ids
                    env.TF_VAR_aws_vpc_id = accountConfig.vpc_id
                    env.aws_tf_bucket = accountConfig.tf_bucket
                    env.aws_tf_table = accountConfig.tf_table
                    env.TF_VAR_aws_ssl_certificate_arn = accountConfig.ssl_certificate_arn
                    env.TF_VAR_aws_route53_zone_id = accountConfig.route53_zone_id
                    env.TF_VAR_aws_domain = accountConfig.domain
                    env.TF_VAR_aws_subdomain = "${ params.Subdomain }"
                }
                sh 'echo "Environment Variables Set"'
            }
        }
        stage('Test Yaml Configs') {
            steps {
                script {
                    echo "Security Group: ${env.TF_VAR_aws_security_group}"
                    echo "Subnet IDs: ${env.TF_VAR_aws_subnet_ids}"
                    echo "VPC ID: ${env.TF_VAR_aws_vpc_id}"
                    echo "Terraform Bucket: ${env.TF_VAR_aws_tf_bucket}"
                    echo "Terraform Table: ${env.TF_VAR_aws_tf_table}"
                    echo "SSL Certificate ARN: ${env.TF_VAR_aws_ssl_certificate_arn}"
                    echo "Route53 Zone ID: ${env.TF_VAR_aws_route53_zone_id}"
                    echo "Domain: ${env.TF_VAR_aws_domain}"
                    echo "Subdomain: ${env.TF_VAR_aws_subdomain}"
                }
            }
        }
        // stage('AssumeRole') {
        //     steps {
        //         script {
        //             def assumeRoleCmd = """
        //                 aws sts assume-role --role-arn arn:aws:iam::${AWS_ACCOUNT_ID}:role/${ROLE_NAME} --role-session-name CrossAccountSession
        //             """
        //             def assumeRoleOutput = sh(script: assumeRoleCmd, returnStdout: true).trim()
        //             def creds = readJSON(text: assumeRoleOutput).Credentials

        //             env.AWS_ACCESS_KEY_ID = creds.AccessKeyId
        //             env.AWS_SECRET_ACCESS_KEY = creds.SecretAccessKey
        //             env.AWS_SESSION_TOKEN = creds.SessionToken
        //         }
        //     }
        // }
        // stage('TerraformInit') {
        //     steps {
        //         script {
        //                 terraformInit = {
        //                     sh """
        //                         terraform init -reconfigure \
        //                             -backend-config="bucket=${env.TF_VAR_aws_tf_bucket}" \
        //                             -backend-config="key=${env.TF_VAR_aws_domain}/terraform.tfstate" \
        //                             -backend-config="region=${AWS_REGION}" \
        //                             -backend-config="dynamodb_table=terraform-lock-table"
        //                     """
        //                 }
        //         }
        //     }
        // }
        // stage('Build Docker Image') {
        //     steps {
        //         script {
        //             sh 'docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .'
        //         }
        //     }
        // }
        // stage('Publish Docker Image') {
        //     steps {
        //         script {
        //             sh 'docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${IMAGE_NAME}:${IMAGE_TAG}'
        //             sh 'docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${IMAGE_NAME}:${IMAGE_TAG}'
        //         }
        //     }
        // }
    }
}
