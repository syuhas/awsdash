pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID = { params.Account }
        ROLE_NAME = 'jenkinsAdminXacnt'
        AWS_SECURITY_GROUP = ''
        AWS_SUBNET_IDS = ''
        AWS_SUBDOMAIN = { params.Subdomain }
    }

    stages {
        stage('SetEnvVariables') {
            steps {
                script {
                    if (AWS_ACCOUNT_ID == '551796573889') {
                        env.AWS_SECURITY_GROUP = 'sg-00d9ca388301c93a9'
                        env.AWS_SUBNET_IDS = 'subnet-0823df6c43b1a0ea4,subnet-057dcb202796ed034'
                        env.AWS_VPC_ID = 'vpc-0fb8abe9d3c477bd0'
                        env.AWS_TF_BUCKET = 'terraform-lock-bucket'
                        env.AWS_SSL_CERTIFICATE_ARN = 'arn:aws:acm:us-east-1:551796573889:certificate/a96258a9-2996-4186-b5a8-815bf9c5b3e1'
                        env.AWS_ROUTE53_ZONE_ID = 'Z02299283BLAIJGG9JHMK'
                        env.AWS_DOMAIN = 'digitalsteve.net'

                    } else if (AWS_ACCOUNT_ID == '061039789243') {
                        env.AWS_SECURITY_GROUP = 'sg-037b895bfb55fcedd'
                        env.AWS_SUBNET_IDS = 'subnet-0779315ccd9641510,subnet-0e8054e0ff2fef1d8'
                        env.AWS_VPC_ID = 'vpc-04ad271ca687b3562'
                        env.AWS_TF_BUCKET = 'terraform-lock-bucket-dev'
                        env.AWS_SSL_CERTIFICATE_ARN = 'arn:aws:acm:us-east-1:061039789243:certificate/0f0c9829-728a-48d3-aa01-afd1637ad61a'
                        env.AWS_ROUTE53_ZONE_ID = 'Z067106723AVOCD6QFWVC'
                        env.AWS_DOMAIN = 'dev.digitalsteve.dev'
                }
            }
        }
        stage('AssumeRole') {
            steps {
                def assumeRoleCmd = """
                    aws sts assume-role --role-arn arn:aws:iam::${AWS_ACCOUNT_ID}:role/jenkinsAdminXacnt
                """
                def assumeRoleOutput = sh(script: assumeRoleCmd, returnStdout: true).trim()
                def creds = readJSON(text: assumeRoleOutput).Credentials

                env.AWS_ACCESS_KEY_ID = creds.AccessKeyId
                env.AWS_SECRET_ACCESS_KEY = creds.SecretAccessKey
                env.AWS_SESSION_TOKEN = creds.SessionToken
            }
        }
        stage('DeployInfrastructure') {
            when {
                expression { params.Options == 'Deploy' || params.Options == 'Update' }
            }
            steps {
                    dir('deploy') {
                        sh 'terraform init'
                        sh 'terraform plan -out=plan.tfplan -var-file="infrastructure.tfvars"'
                        sh 'terraform apply -auto-approve plan.tfplan'
                        script {
                            env.INSTANCE_ID = sh(script: 'terraform output -raw instance_id', returnStdout: true).trim()
                            env.PUBLIC_IP = sh(script: 'terraform output -raw instance_public_ip', returnStdout: true).trim()
                            env.PUBLIC_DNS = sh(script: 'terraform output -raw instance_public_dns', returnStdout: true).trim()
                            env.INSTANCE_NAME = sh(script: 'terraform output -raw instance_name', returnStdout: true).trim()
                        }
                        sh 'echo "Instance ID: ${INSTANCE_ID}"'
                        sh 'echo "Public IP: ${PUBLIC_IP}"'
                        sh 'echo "Public DNS: ${PUBLIC_DNS}"'
                        sh 'echo "Instance Name: ${INSTANCE_NAME}"'
                    }
            }
        }

        stage('ServerSetup') {
            when {
                expression { params.Options == 'Deploy' || params.Options == 'Update' }
            }
            steps {
                sshagent(['ec2']) {
                    sh 'bash deploy/deploy.sh'
                }
            }
        }

        stage('DestroyInfrastructure') {
            when {
                expression { params.Options == 'Destroy' }
            }
            steps {
                dir('deploy') {
                    sh 'terraform init'
                    sh 'terraform destroy -auto-approve'
                }
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up workspace'
            cleanWs()
        }
    }
}